{"title":"Bee ID Application","markdown":{"yaml":{"title":"Bee ID Application","author":"Cian Prendergast","date":"2023-01-04","categories":["machine learning","fastai"],"image":"app_screenshot.jpg"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nMore than half of Ireland’s bee species have undergone substantial declines in their numbers since 1980. With 30% of the Irish species threatened with extinction and 6 out of 21 bumblebee species are listed as endangered or vulnerable. \n\nIn response to this decline, the National Biodiversity Data Centre (NBDC) launched the ‘The All-Ireland Pollinator Plan’ aimed specifically at increasing bee numbers in Ireland. The NBDC aims to help drive pollinator conservation through better data. It is entirely reliant on the generosity of volunteer recorders who get involved and submit data on Ireland’s bees. \n\nVolunteers submit sightings via an online portal and have the option to email beforehand a photograph for validation before submitting the record. NBDC also offer courses for volunteers to identify bee species themselves when submitting sightings. However, this interface has affordance issues. Volunteers must access a separate web portal, identify the species themselves based on learned knowledge and submit an image and location. Example of identifying varying red-tailed bumblebees in figure 1 below.\n\n![](fig1.png)\n\nFigure 1. Identifying by eye varying red-tailed bees (Bees & Wasps of Ireland, 2022). \n\nTo reduce the risk of misidentification of bee species by volunteers, will develop a web app app using streamlit that will use a convoluted neural network, trained on already labelled data to classify uploaded images of bees.  \n\n\n### Objective:\n1) Reduce record errors by incorporating an image classifier trained to identify bees.\n\nIn order to create an app that meets the objective above, will use an iterative process to develop the developing the machine learning system in production (Huyen, 2020). The following section will go through each step-in detail and subheadings will refer to each step of the iterative process illustrated in figure 2 below. \n\n![](fig2.png)\n\nFigure 2. Iterative process of development (Huyen, 2020).\n\n\n# 1. Project Scoping\n\nskip\n\n# 2. Data Engineering\n\nIn order to train the image classifier will first need a labelled dataset. Luckily the NBDC have a large bee species dataset available which itself was collated from a network of scientific NGO’s aimed at providing open source data <a href=\"https://species.biodiversityireland.ie/?keyword=Bees\">here</a>\n\nThe dataset contains 99 bee species which will be used to train a multi-label classification model. However, the dataset classes are highly imbalanced. For example, honeybees have over 600,000 images present in the dataset while some solitary bee species only have 10-15 images. \n\nWe simple go through each bee species name, click the link and download the files manually. \n\n![](fig3.png)\n\nFigure 3. Website contaning bee data.\n\nNext will need to unzip each folder, convert text files to csv and dowload the image URLs. \n\n```python\nimport urllib.request\nimport os\nimport pandas as pd\nimport re\nimport csv\n\n# optinal (Windows ppup alerting when download finished)\nimport time\nfrom plyer import notification\n```\n\nManually paste bee species from list.\n\n```python\nbeeName = \"Andrena stragulata\"\n\nwith open(r\"C:\\Users\\Cian\\Documents\\Bee_Images\\{}\".format(beeName)+\"\\multimedia.txt\",encoding=\"utf8\") as file:\n        for line in file:\n            urls = re.findall('(https?://[^\\s]+?\\.jpg)', line) # extract all urls which have .jpg\n            #print([x for x in urls if x])\n            \n            Urls_img.append([x for x in urls if x])\n```\n\nLets check how many are downloaded per bee species (i.e., Andrena stragulata).\n\n```python\nlength_list = len(Urls_img)\n\nprint(\"the num of elem stored is\", length_list) \n```\nRemove any blanks (`findall` method returns a lot of empty lists). \n\n```python\nres = [ele for ele in Urls_img if ele != []]\n```\n\nCheck final number of bee URLs stored in the list, after removing blanks.\n\n```python\nlength_list = len(res)\nprint(\"the num of elem stored is\", length_list) \n```\nOutput for Andrena stragulata is: \n\n```python\nthe num of elem stored is 2\n```\n\nAn optional Excel trick I used is below. If there is a large number of images (ie.., Honeybee) in Excel (\"Go To\" menu) and in the Reference section type the address of the range I want to select. For instance, to select the first 100,000 rows, type 1:100000\n\n```python\nprint(\"1:\",length_list/3) # used if very large, can split up in Excel ie: 'cell 1:50000'\n```\nNext, will convert this list of bee image URLs into a CSV file:\n\n```python\nwith open(\"{}\".format(beeName)+\".csv\", 'w', encoding='UTF8', newline='') as f:\n    writer = csv.writer(f)\n    # write multiple rows\n    writer.writerows(res)\n    \n```\nThen will make a folder\n\n```python\ndir = os.path.join(r\"C:\\Users\\Cian\\Documents\\Dataset_Bees\\{}\".format(beeName))\nif not os.path.exists(dir):\n    os.mkdir(dir)\n```\n\nWe can also make a sub-folder, for naming files. This is a bot of a round-about-way but how it's hopw I worked it out for this project.\n\n```python\ndir = os.path.join(r\"C:\\Users\\Cian\\Documents\\Dataset_Bees\\{}\".format(beeName)+\"\\data\")\nif not os.path.exists(dir):\n    os.mkdir(dir)\n```\nThese next two variables point to where the CSV file of image URL is stored where store the downloaded images\n\n```python\nURL_PATH = (r\"C:\\Users\\Cian\\Documents\\Test_Bee_Images\\{}\".format(beeName)+\".csv\") \n\nIMAGE_PATH = (r\"C:\\Users\\Cian\\Documents\\Dataset_Bees\\{}\".format(beeName)+\"\\data\") \n```\n\nSo for example `print(IMAGE_PATH)` will output:\n\n```python\nC:\\Users\\Cian\\Documents\\Dataset_Bees\\Andrena stragulata\\data\n```\n\nFinally, we now run this method below to start downloading the images, depending on how many are stored in the list this can take a long time. \n\n```python\ndef url_jpg(URL_PATH, IMAGE_PATH):\n    URLS = pd.read_csv(URL_PATH)\n    url = []\n    for i in enumerate(URLS.values):\n        links = i[1][0]\n        url.append(links)\n\n    for j in range(len(url)):\n        fileName = ('image{}.jpg'.format(j))\n        imagePath = ('{}{}'.format(IMAGE_PATH, fileName))\n        try: \n            urllib.request.urlretrieve(url[j], imagePath)\n            print('{} saved.'.format(fileName))\n        except:\n            pass\n    notification.notify(\n        title = \"Install complete\",\n        message = \"{}\".format(beeName),\n        timeout = 10\n    )\n    \n```\n\nRemember, to run a method stored in a jupyter cell, we have to call it in a seperate cell such as: ```python url_jpg(URL_PATH, IMAGE_PATH)```"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.242","theme":"solar","title-block-banner":true,"title":"Bee ID Application","author":"Cian Prendergast","date":"2023-01-04","categories":["machine learning","fastai"],"image":"app_screenshot.jpg"},"extensions":{"book":{"multiFile":true}}}}}